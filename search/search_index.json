{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83c\udfa0 Flet Carousel Slider Documentation","text":"<p>Welcome to the complete documentation for Flet Carousel Slider - a powerful extension that brings beautiful, customizable carousels to your Flet applications.</p>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<pre><code>pip install flet-carousel-slider\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code>import flet as ft\nfrom flet_carousel_slider import FletCarouselSlider\n\ndef main(page: ft.Page):\n    # Create carousel items\n    items = [\n        ft.Container(\n            content=ft.Text(f\"Page {i}\", size=24, color=ft.Colors.WHITE),\n            bgcolor=ft.Colors.BLUE_400,\n            border_radius=10,\n            padding=20,\n            alignment=ft.alignment.center,\n        )\n        for i in range(5)\n    ]\n\n    # Create carousel\n    carousel = FletCarouselSlider(\n        items=items,\n        height=300,\n        auto_play=True,\n        enlarge_center_page=True,\n    )\n\n    page.add(carousel)\n\nft.app(main)\n</code></pre>"},{"location":"#api-reference","title":"\ud83d\udcda API Reference","text":""},{"location":"#main-classes","title":"Main Classes","text":"<ul> <li>FletCarouselSlider - The main carousel control</li> <li>CenterPageEnlargeStrategy - Enlarge strategies enum</li> <li>ScrollDirection - Scroll direction enum</li> <li>EventData - Event data object</li> </ul>"},{"location":"#key-features","title":"\ud83c\udfaf Key Features","text":""},{"location":"#auto-play","title":"\u2728 Auto-Play","text":"<ul> <li>Customizable intervals (1-8 seconds)</li> <li>Smooth animation transitions</li> <li>Pause on touch/manual navigation</li> <li>Multiple animation curves</li> </ul>"},{"location":"#visual-customization","title":"\ud83c\udfa8 Visual Customization","text":"<ul> <li>Enlarge center page with scale, zoom, or height strategies</li> <li>Viewport fraction control (0.3-1.0)</li> <li>Aspect ratio adjustment</li> <li>Clip behaviors (none, hard edge, anti-alias)</li> </ul>"},{"location":"#navigation","title":"\ud83d\udd04 Navigation","text":"<ul> <li>Infinite scroll support</li> <li>Bidirectional (horizontal/vertical)</li> <li>Page snapping for smooth transitions</li> <li>Manual controls with custom animations</li> </ul>"},{"location":"#events","title":"\ud83d\udce1 Events","text":"<ul> <li>Page change events with reason tracking</li> <li>Scroll position events for advanced interactions</li> <li>Attribute-style access (<code>data.index</code>, <code>data.position</code>)</li> <li>Backward compatibility with dict-style access</li> </ul>"},{"location":"#interactive-examples","title":"\ud83c\udfae Interactive Examples","text":""},{"location":"#real-time-parameter-control","title":"Real-Time Parameter Control","text":"<p>The package includes an interactive demo that lets you experiment with all parameters in real-time:</p> <pre><code>python examples/flet_carousel_slider_example/src/main.py\n</code></pre> <p>Features: - \ud83c\udf9b\ufe0f Sliders for height, aspect ratio, viewport fraction - \u2611\ufe0f Checkboxes for boolean options (auto-play, infinite scroll, etc.) - \ud83d\udccb Dropdowns for enums (animation curves, enlarge strategies) - \ud83d\udd04 Live updates - see changes instantly</p>"},{"location":"#advanced-use-cases","title":"Advanced Use Cases","text":"<pre><code># Image Gallery Carousel\nimage_carousel = FletCarouselSlider(\n    items=image_items,\n    height=400,\n    auto_play=True,\n    auto_play_interval=5000,\n    enlarge_center_page=True,\n    enlarge_strategy=CenterPageEnlargeStrategy.SCALE,\n    clip_behavior=ft.ClipBehavior.ANTI_ALIAS,\n)\n\n# Vertical Testimonials\ntestimonial_carousel = FletCarouselSlider(\n    items=testimonial_items,\n    height=200,\n    scroll_direction=ScrollDirection.VERTICAL,\n    auto_play=True,\n    viewport_fraction=0.8,\n)\n\n# Product Showcase\nproduct_carousel = FletCarouselSlider(\n    items=product_items,\n    height=350,\n    auto_play=False,\n    enlarge_center_page=True,\n    enlarge_strategy=CenterPageEnlargeStrategy.ZOOM,\n    on_page_changed=lambda data: print(f\"Viewing product {data.index}\"),\n)\n</code></pre>"},{"location":"#advanced-configuration","title":"\ud83d\udd27 Advanced Configuration","text":""},{"location":"#animation-system","title":"Animation System","text":"<p>Use Flet's powerful animation system:</p> <pre><code>carousel = FletCarouselSlider(\n    items=items,\n    auto_play_animation=ft.Animation(\n        duration=1200,\n        curve=ft.AnimationCurve.EASE_IN_OUT_CUBIC\n    ),\n)\n\n# Manual navigation with custom animations\ncarousel.next_page(ft.Animation(800, ft.AnimationCurve.BOUNCE_OUT))\ncarousel.previous_page(ft.Animation(600, ft.AnimationCurve.ELASTIC_OUT))\ncarousel.animate_to_page(2, ft.Animation(1000, ft.AnimationCurve.EASE_IN_OUT_BACK))\n</code></pre>"},{"location":"#event-handling","title":"Event Handling","text":"<pre><code>def on_page_changed(data):\n    # New attribute-style access (recommended)\n    print(f\"Page: {data.index}, Reason: {data.reason}\")\n\n    # Legacy dict-style access (still supported)\n    print(f\"Page: {data['index']}, Reason: {data['reason']}\")\n\ndef on_scrolled(data):\n    # Raw position from Flutter carousel_slider\n    position = data.position\n    print(f\"Scroll position: {position}\")\n\ncarousel = FletCarouselSlider(\n    items=items,\n    enable_scroll_events=True,\n    on_page_changed=on_page_changed,\n    on_scrolled=on_scrolled,\n)\n</code></pre>"},{"location":"#styling-examples","title":"\ud83c\udfa8 Styling Examples","text":""},{"location":"#modern-card-layout","title":"Modern Card Layout","text":"<pre><code>def create_card(title, subtitle, color):\n    return ft.Container(\n        content=ft.Column([\n            ft.Icon(ft.Icons.STAR, size=50, color=ft.Colors.WHITE),\n            ft.Text(title, size=20, weight=ft.FontWeight.BOLD, color=ft.Colors.WHITE),\n            ft.Text(subtitle, size=14, color=ft.Colors.WHITE70),\n        ], alignment=ft.MainAxisAlignment.CENTER, spacing=10),\n        bgcolor=color,\n        border_radius=20,\n        padding=30,\n        shadow=ft.BoxShadow(\n            spread_radius=2,\n            blur_radius=10,\n            color=ft.Colors.with_opacity(0.3, ft.Colors.BLACK),\n        ),\n    )\n\ncards = [\n    create_card(\"Feature 1\", \"Description\", ft.Colors.BLUE_400),\n    create_card(\"Feature 2\", \"Description\", ft.Colors.GREEN_400),\n    create_card(\"Feature 3\", \"Description\", ft.Colors.ORANGE_400),\n]\n\ncarousel = FletCarouselSlider(\n    items=cards,\n    height=300,\n    enlarge_center_page=True,\n    enlarge_factor=0.3,\n    viewport_fraction=0.8,\n)\n</code></pre>"},{"location":"#migration-guide","title":"\ud83d\udd04 Migration Guide","text":""},{"location":"#upgrading-from-dict-style-events","title":"Upgrading from Dict-style Events","text":"<p>Before: <pre><code>def on_page_changed(e):\n    data = e.data\n    index = data['index']\n    reason = data['reason']\n</code></pre></p> <p>After: <pre><code>def on_page_changed(data):\n    index = data.index      # \u2728 Direct attribute access\n    reason = data.reason    # \u2728 Cleaner, more Pythonic\n</code></pre></p> <p>Both styles are supported for backward compatibility.</p>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>We welcome contributions! Check out our GitHub repository for:</p> <ul> <li>\ud83d\udc1b Bug reports</li> <li>\ud83d\udca1 Feature requests</li> <li>\ud83d\udd27 Pull requests</li> <li>\ud83d\udcd6 Documentation improvements</li> </ul>"},{"location":"#license","title":"\ud83d\udcc4 License","text":"<p>This project is licensed under the MIT License.</p> <p>Ready to create amazing carousels? Check out the complete API reference!</p>"},{"location":"FletCarouselSlider/","title":"API Reference","text":""},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider","title":"<code>src.flet_carousel_slider.flet_carousel_slider</code>","text":""},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider-classes","title":"Classes","text":""},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.CarouselPageChangedReason","title":"<code>CarouselPageChangedReason</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum for carousel page changed reasons.</p> Source code in <code>src\\flet_carousel_slider\\flet_carousel_slider.py</code> <pre><code>class CarouselPageChangedReason(Enum):\n    \"\"\"\n    Enum for carousel page changed reasons.\n    \"\"\"\n\n    CONTROLLER = \"controller\"\n    MANUAL = \"manual\"\n    TIMED = \"timed\"\n</code></pre>"},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.CenterPageEnlargeStrategy","title":"<code>CenterPageEnlargeStrategy</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum for center page enlarge strategy.</p> Source code in <code>src\\flet_carousel_slider\\flet_carousel_slider.py</code> <pre><code>class CenterPageEnlargeStrategy(Enum):\n    \"\"\"\n    Enum for center page enlarge strategy.\n    \"\"\"\n\n    SCALE = \"scale\"\n    HEIGHT = \"height\"\n    ZOOM = \"zoom\"\n</code></pre>"},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.EventData","title":"<code>EventData</code>","text":"<p>Event data class that allows both dict-style and attribute-style access.</p> <p>This class provides a convenient way to access event data using either attribute notation (data.index) or dictionary notation (data['index']).</p> <p>Attributes:</p> Name Type Description <code>Common</code> <code>attributes include</code> <code>-</code> <code>index (int</code> <p>Page index for page change events</p> <code>-</code> <code>reason (str</code> <p>Reason for page change events</p> <code>-</code> <code>position (float</code> <p>Scroll position for scroll events</p> <p>Examples:</p> <pre><code># Attribute-style access (recommended)\ndef on_page_changed(data):\n    print(f\"Page: {data.index}, Reason: {data.reason}\")\n\n# Dict-style access (backward compatibility)\ndef on_page_changed(data):\n    print(f\"Page: {data['index']}, Reason: {data['reason']}\")\n</code></pre> Source code in <code>src\\flet_carousel_slider\\flet_carousel_slider.py</code> <pre><code>class EventData:\n    \"\"\"\n    Event data class that allows both dict-style and attribute-style access.\n\n    This class provides a convenient way to access event data using either\n    attribute notation (data.index) or dictionary notation (data['index']).\n\n    Attributes:\n        Dynamic attributes are created based on the input data dictionary.\n        Common attributes include:\n        - index (int): Page index for page change events\n        - reason (str): Reason for page change events\n        - position (float): Scroll position for scroll events\n\n    Examples:\n        ```python\n        # Attribute-style access (recommended)\n        def on_page_changed(data):\n            print(f\"Page: {data.index}, Reason: {data.reason}\")\n\n        # Dict-style access (backward compatibility)\n        def on_page_changed(data):\n            print(f\"Page: {data['index']}, Reason: {data['reason']}\")\n        ```\n    \"\"\"\n\n    def __init__(self, data_dict):\n        \"\"\"\n        Initialize EventData with a dictionary.\n\n        Args:\n            data_dict (dict): Dictionary containing event data\n        \"\"\"\n        self._data = data_dict\n        # Set attributes dynamically from dict\n        for key, value in data_dict.items():\n            setattr(self, key, value)\n\n    def __getitem__(self, key):\n        \"\"\"Allow dict-style access for backward compatibility.\"\"\"\n        return self._data[key]\n\n    def __contains__(self, key):\n        \"\"\"Support 'in' operator.\"\"\"\n        return key in self._data\n\n    def get(self, key, default=None):\n        \"\"\"Support dict.get() method.\"\"\"\n        return self._data.get(key, default)\n\n    def __repr__(self):\n        return f\"EventData({self._data})\"\n</code></pre>"},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.EventData-functions","title":"Functions","text":""},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.EventData.__contains__","title":"<code>__contains__(key)</code>","text":"<p>Support 'in' operator.</p> Source code in <code>src\\flet_carousel_slider\\flet_carousel_slider.py</code> <pre><code>def __contains__(self, key):\n    \"\"\"Support 'in' operator.\"\"\"\n    return key in self._data\n</code></pre>"},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.EventData.__getitem__","title":"<code>__getitem__(key)</code>","text":"<p>Allow dict-style access for backward compatibility.</p> Source code in <code>src\\flet_carousel_slider\\flet_carousel_slider.py</code> <pre><code>def __getitem__(self, key):\n    \"\"\"Allow dict-style access for backward compatibility.\"\"\"\n    return self._data[key]\n</code></pre>"},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.EventData.__init__","title":"<code>__init__(data_dict)</code>","text":"<p>Initialize EventData with a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>data_dict</code> <code>dict</code> <p>Dictionary containing event data</p> required Source code in <code>src\\flet_carousel_slider\\flet_carousel_slider.py</code> <pre><code>def __init__(self, data_dict):\n    \"\"\"\n    Initialize EventData with a dictionary.\n\n    Args:\n        data_dict (dict): Dictionary containing event data\n    \"\"\"\n    self._data = data_dict\n    # Set attributes dynamically from dict\n    for key, value in data_dict.items():\n        setattr(self, key, value)\n</code></pre>"},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.EventData.get","title":"<code>get(key, default=None)</code>","text":"<p>Support dict.get() method.</p> Source code in <code>src\\flet_carousel_slider\\flet_carousel_slider.py</code> <pre><code>def get(self, key, default=None):\n    \"\"\"Support dict.get() method.\"\"\"\n    return self._data.get(key, default)\n</code></pre>"},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.FletCarouselSlider","title":"<code>FletCarouselSlider</code>","text":"<p>               Bases: <code>ConstrainedControl</code></p> <p>A powerful Flet control that wraps the Flutter carousel_slider package.</p> <p>This control provides a highly customizable carousel/slider widget with support for auto-play, infinite scrolling, multiple enlarge strategies, and comprehensive event handling.</p> Features <ul> <li>Auto-play with customizable intervals and animations</li> <li>Multiple enlarge strategies (scale, zoom, height)</li> <li>Infinite scroll support</li> <li>Vertical and horizontal scrolling</li> <li>Page change and scroll event callbacks</li> <li>Real-time parameter updates</li> <li>Native Flutter performance</li> </ul> <p>Examples:</p> <p>Basic usage: <pre><code>import flet as ft\nfrom flet_carousel_slider import FletCarouselSlider\n\ndef main(page: ft.Page):\n    items = [\n        ft.Container(\n            content=ft.Text(f\"Page {i}\", size=24),\n            bgcolor=ft.Colors.BLUE_400,\n            border_radius=10,\n            padding=20,\n        )\n        for i in range(5)\n    ]\n\n    carousel = FletCarouselSlider(\n        items=items,\n        height=300,\n        auto_play=True,\n        enlarge_center_page=True,\n    )\n\n    page.add(carousel)\n\nft.app(main)\n</code></pre></p> <p>Advanced usage with events: <pre><code>def on_page_changed(data):\n    print(f\"Page changed to: {data.index}\")\n\ncarousel = FletCarouselSlider(\n    items=items,\n    height=350,\n    auto_play=True,\n    auto_play_animation=ft.Animation(800, ft.AnimationCurve.EASE_IN_OUT),\n    enlarge_center_page=True,\n    enlarge_strategy=CenterPageEnlargeStrategy.SCALE,\n    on_page_changed=on_page_changed,\n)\n</code></pre></p> Source code in <code>src\\flet_carousel_slider\\flet_carousel_slider.py</code> <pre><code>class FletCarouselSlider(ConstrainedControl):\n    \"\"\"\n    A powerful Flet control that wraps the Flutter carousel_slider package.\n\n    This control provides a highly customizable carousel/slider widget with support for\n    auto-play, infinite scrolling, multiple enlarge strategies, and comprehensive event handling.\n\n    Features:\n        - Auto-play with customizable intervals and animations\n        - Multiple enlarge strategies (scale, zoom, height)\n        - Infinite scroll support\n        - Vertical and horizontal scrolling\n        - Page change and scroll event callbacks\n        - Real-time parameter updates\n        - Native Flutter performance\n\n    Examples:\n        Basic usage:\n        ```python\n        import flet as ft\n        from flet_carousel_slider import FletCarouselSlider\n\n        def main(page: ft.Page):\n            items = [\n                ft.Container(\n                    content=ft.Text(f\"Page {i}\", size=24),\n                    bgcolor=ft.Colors.BLUE_400,\n                    border_radius=10,\n                    padding=20,\n                )\n                for i in range(5)\n            ]\n\n            carousel = FletCarouselSlider(\n                items=items,\n                height=300,\n                auto_play=True,\n                enlarge_center_page=True,\n            )\n\n            page.add(carousel)\n\n        ft.app(main)\n        ```\n\n        Advanced usage with events:\n        ```python\n        def on_page_changed(data):\n            print(f\"Page changed to: {data.index}\")\n\n        carousel = FletCarouselSlider(\n            items=items,\n            height=350,\n            auto_play=True,\n            auto_play_animation=ft.Animation(800, ft.AnimationCurve.EASE_IN_OUT),\n            enlarge_center_page=True,\n            enlarge_strategy=CenterPageEnlargeStrategy.SCALE,\n            on_page_changed=on_page_changed,\n        )\n        ```\n    \"\"\"\n\n    def __init__(\n        self,\n        #\n        # Control\n        #\n        opacity: OptionalNumber = None,\n        tooltip: Optional[str] = None,\n        visible: Optional[bool] = None,\n        data: Any = None,\n        #\n        # ConstrainedControl\n        #\n        left: OptionalNumber = None,\n        top: OptionalNumber = None,\n        right: OptionalNumber = None,\n        bottom: OptionalNumber = None,\n        #\n        # FletCarouselSlider specific\n        #\n        items: Optional[List[Control]] = None,\n        height: OptionalNumber = None,\n        aspect_ratio: OptionalNumber = 16 / 9,\n        viewport_fraction: OptionalNumber = 0.8,\n        initial_page: Optional[int] = 0,\n        enable_infinite_scroll: Optional[bool] = True,\n        animate_to_closest: Optional[bool] = True,\n        reverse: Optional[bool] = False,\n        auto_play: Optional[bool] = False,\n        auto_play_interval: Optional[int] = 4000,  # milliseconds\n        auto_play_animation: Optional[AnimationValue] = None,\n        enlarge_center_page: Optional[bool] = False,\n        enlarge_factor: OptionalNumber = 0.3,\n        enlarge_strategy: Optional[\n            CenterPageEnlargeStrategy\n        ] = CenterPageEnlargeStrategy.SCALE,\n        page_snapping: Optional[bool] = True,\n        scroll_direction: Optional[ScrollDirection] = ScrollDirection.HORIZONTAL,\n        pause_auto_play_on_touch: Optional[bool] = True,\n        pause_auto_play_on_manual_navigate: Optional[bool] = True,\n        pause_auto_play_in_finite_scroll: Optional[bool] = False,\n        disable_center: Optional[bool] = False,\n        pad_ends: Optional[bool] = True,\n        clip_behavior: Optional[ClipBehavior] = ClipBehavior.HARD_EDGE,\n        enable_scroll_events: Optional[bool] = False,\n        on_page_changed: OptionalControlEventCallable = None,\n        on_scrolled: OptionalControlEventCallable = None,\n    ):\n        ConstrainedControl.__init__(\n            self,\n            tooltip=tooltip,\n            opacity=opacity,\n            visible=visible,\n            data=data,\n            left=left,\n            top=top,\n            right=right,\n            bottom=bottom,\n        )\n\n        self.items = items or []\n        self.height = height\n        self.aspect_ratio = aspect_ratio\n        self.viewport_fraction = viewport_fraction\n        self.initial_page = initial_page\n        self.enable_infinite_scroll = enable_infinite_scroll\n        self.animate_to_closest = animate_to_closest\n        self.reverse = reverse\n        self.auto_play = auto_play\n        self.auto_play_interval = auto_play_interval\n        self.auto_play_animation = auto_play_animation\n        self.enlarge_center_page = enlarge_center_page\n        self.enlarge_factor = enlarge_factor\n        self.enlarge_strategy = enlarge_strategy\n        self.page_snapping = page_snapping\n        self.scroll_direction = scroll_direction\n        self.pause_auto_play_on_touch = pause_auto_play_on_touch\n        self.pause_auto_play_on_manual_navigate = pause_auto_play_on_manual_navigate\n        self.pause_auto_play_in_finite_scroll = pause_auto_play_in_finite_scroll\n        self.disable_center = disable_center\n        self.pad_ends = pad_ends\n        self.clip_behavior = clip_behavior\n        self.enable_scroll_events = enable_scroll_events\n        # Initialize handler variables\n        self.__on_page_changed_handler = None\n        self.__on_scrolled_handler = None\n\n        self.on_page_changed = on_page_changed\n        self.on_scrolled = on_scrolled\n\n        # Add internal event handlers for JSON decoding\n        self._add_event_handler(\"page_changed\", self._on_page_changed_internal)\n        self._add_event_handler(\"scrolled\", self._on_scrolled_internal)\n\n    def before_update(self):\n        super().before_update()\n        self._set_attr_json(\"autoPlayAnimation\", self.__auto_play_animation)\n\n    def _get_control_name(self):\n        return \"flet_carousel_slider\"\n\n    def _get_children(self):\n        \"\"\"\n        Returns the list of child controls (carousel items).\n        \"\"\"\n        children = []\n        for i, item in enumerate(self.items):\n            if item is not None:\n                item._set_attr_internal(\"n\", f\"item_{i}\")\n                children.append(item)\n        return children\n\n    # items property\n    @property\n    def items(self) -&gt; List[Control]:\n        \"\"\"\n        List of widgets to be displayed in the carousel.\n        \"\"\"\n        return self.__items\n\n    @items.setter\n    def items(self, value: Optional[List[Control]]):\n        self.__items = value or []\n\n    # height property\n    @property\n    def height(self) -&gt; OptionalNumber:\n        \"\"\"\n        Set carousel height and overrides any existing aspect_ratio.\n        \"\"\"\n        return self._get_attr(\"height\")\n\n    @height.setter\n    def height(self, value: OptionalNumber):\n        self._set_attr(\"height\", value)\n\n    # aspect_ratio property\n    @property\n    def aspect_ratio(self) -&gt; OptionalNumber:\n        \"\"\"\n        Aspect ratio is used if no height have been declared.\n        Defaults to 16/9.\n        \"\"\"\n        return self._get_attr(\"aspectRatio\")\n\n    @aspect_ratio.setter\n    def aspect_ratio(self, value: OptionalNumber):\n        self._set_attr(\"aspectRatio\", value)\n\n    # viewport_fraction property\n    @property\n    def viewport_fraction(self) -&gt; OptionalNumber:\n        \"\"\"\n        The fraction of the viewport that each page should occupy.\n        Defaults to 0.8.\n        \"\"\"\n        return self._get_attr(\"viewportFraction\")\n\n    @viewport_fraction.setter\n    def viewport_fraction(self, value: OptionalNumber):\n        self._set_attr(\"viewportFraction\", value)\n\n    # initial_page property\n    @property\n    def initial_page(self) -&gt; Optional[int]:\n        \"\"\"\n        The initial page to show when first creating the CarouselSlider.\n        \"\"\"\n        return self._get_attr(\"initialPage\")\n\n    @initial_page.setter\n    def initial_page(self, value: Optional[int]):\n        self._set_attr(\"initialPage\", value)\n\n    # enable_infinite_scroll property\n    @property\n    def enable_infinite_scroll(self) -&gt; Optional[bool]:\n        \"\"\"\n        Determines if carousel should loop infinitely or be limited to item length.\n        \"\"\"\n        return self._get_attr(\"enableInfiniteScroll\")\n\n    @enable_infinite_scroll.setter\n    def enable_infinite_scroll(self, value: Optional[bool]):\n        self._set_attr(\"enableInfiniteScroll\", value)\n\n    # animate_to_closest property\n    @property\n    def animate_to_closest(self) -&gt; Optional[bool]:\n        \"\"\"\n        Determines if carousel should loop to the closest occurrence of requested page.\n        \"\"\"\n        return self._get_attr(\"animateToClosest\")\n\n    @animate_to_closest.setter\n    def animate_to_closest(self, value: Optional[bool]):\n        self._set_attr(\"animateToClosest\", value)\n\n    # reverse property\n    @property\n    def reverse(self) -&gt; Optional[bool]:\n        \"\"\"\n        Reverse the order of items if set to true.\n        \"\"\"\n        return self._get_attr(\"reverse\")\n\n    @reverse.setter\n    def reverse(self, value: Optional[bool]):\n        self._set_attr(\"reverse\", value)\n\n    # auto_play property\n    @property\n    def auto_play(self) -&gt; Optional[bool]:\n        \"\"\"\n        Enables auto play, sliding one page at a time.\n        \"\"\"\n        return self._get_attr(\"autoPlay\")\n\n    @auto_play.setter\n    def auto_play(self, value: Optional[bool]):\n        self._set_attr(\"autoPlay\", value)\n\n    # auto_play_interval property\n    @property\n    def auto_play_interval(self) -&gt; Optional[int]:\n        \"\"\"\n        Sets Duration to determine the frequency of slides when auto play is enabled.\n        Value in milliseconds. Defaults to 4000ms (4 seconds).\n        \"\"\"\n        return self._get_attr(\"autoPlayInterval\")\n\n    @auto_play_interval.setter\n    def auto_play_interval(self, value: Optional[int]):\n        self._set_attr(\"autoPlayInterval\", value)\n\n    # auto_play_animation property\n    @property\n    def auto_play_animation(self) -&gt; Optional[AnimationValue]:\n        \"\"\"\n        The animation configuration for auto play transitions.\n        Can be:\n        - bool: True to enable with default settings, False to disable\n        - int: Duration in milliseconds (e.g., 800)\n        - Animation: Full animation object with duration and curve\n\n        Examples:\n        - auto_play_animation=True  # Default animation\n        - auto_play_animation=500  # 500ms duration with default curve\n        - auto_play_animation=ft.Animation(800, ft.AnimationCurve.EASE_IN_OUT)\n        \"\"\"\n        return self.__auto_play_animation\n\n    @auto_play_animation.setter\n    def auto_play_animation(self, value: Optional[AnimationValue]):\n        self.__auto_play_animation = value\n\n    # enlarge_center_page property\n    @property\n    def enlarge_center_page(self) -&gt; Optional[bool]:\n        \"\"\"\n        Determines if current page should be larger than the side images,\n        creating a feeling of depth in the carousel.\n        \"\"\"\n        return self._get_attr(\"enlargeCenterPage\")\n\n    @enlarge_center_page.setter\n    def enlarge_center_page(self, value: Optional[bool]):\n        self._set_attr(\"enlargeCenterPage\", value)\n\n    # enlarge_factor property\n    @property\n    def enlarge_factor(self) -&gt; OptionalNumber:\n        \"\"\"\n        How much the pages next to the center page will be scaled down.\n        If enlarge_center_page is false, this property has no effect.\n        Defaults to 0.3.\n        \"\"\"\n        return self._get_attr(\"enlargeFactor\")\n\n    @enlarge_factor.setter\n    def enlarge_factor(self, value: OptionalNumber):\n        self._set_attr(\"enlargeFactor\", value)\n\n    # enlarge_strategy property\n    @property\n    def enlarge_strategy(self) -&gt; Optional[CenterPageEnlargeStrategy]:\n        \"\"\"\n        Use enlarge_strategy to determine which method to enlarge the center page.\n        \"\"\"\n        return self._get_attr(\"enlargeStrategy\")\n\n    @enlarge_strategy.setter\n    def enlarge_strategy(self, value: Optional[CenterPageEnlargeStrategy]):\n        self._set_attr(\"enlargeStrategy\", value.value if value else None)\n\n    # page_snapping property\n    @property\n    def page_snapping(self) -&gt; Optional[bool]:\n        \"\"\"\n        Set to false to disable page snapping, useful for custom scroll behavior.\n        \"\"\"\n        return self._get_attr(\"pageSnapping\")\n\n    @page_snapping.setter\n    def page_snapping(self, value: Optional[bool]):\n        self._set_attr(\"pageSnapping\", value)\n\n    # scroll_direction property\n    @property\n    def scroll_direction(self) -&gt; Optional[ScrollDirection]:\n        \"\"\"\n        The axis along which the page view scrolls.\n        \"\"\"\n        return self._get_attr(\"scrollDirection\")\n\n    @scroll_direction.setter\n    def scroll_direction(self, value: Optional[ScrollDirection]):\n        self._set_attr(\"scrollDirection\", value.value if value else None)\n\n    # pause_auto_play_on_touch property\n    @property\n    def pause_auto_play_on_touch(self) -&gt; Optional[bool]:\n        \"\"\"\n        If true, the auto play function will be paused when user is interacting with\n        the carousel, and will be resumed when user finish interacting.\n        \"\"\"\n        return self._get_attr(\"pauseAutoPlayOnTouch\")\n\n    @pause_auto_play_on_touch.setter\n    def pause_auto_play_on_touch(self, value: Optional[bool]):\n        self._set_attr(\"pauseAutoPlayOnTouch\", value)\n\n    # pause_auto_play_on_manual_navigate property\n    @property\n    def pause_auto_play_on_manual_navigate(self) -&gt; Optional[bool]:\n        \"\"\"\n        If true, the auto play function will be paused when user is calling\n        controller's next_page or previous_page or animate_to_page method.\n        \"\"\"\n        return self._get_attr(\"pauseAutoPlayOnManualNavigate\")\n\n    @pause_auto_play_on_manual_navigate.setter\n    def pause_auto_play_on_manual_navigate(self, value: Optional[bool]):\n        self._set_attr(\"pauseAutoPlayOnManualNavigate\", value)\n\n    # pause_auto_play_in_finite_scroll property\n    @property\n    def pause_auto_play_in_finite_scroll(self) -&gt; Optional[bool]:\n        \"\"\"\n        If enable_infinite_scroll is false, and auto_play is true, this option\n        decides if the carousel should go to the first item when it reaches the last item.\n        \"\"\"\n        return self._get_attr(\"pauseAutoPlayInFiniteScroll\")\n\n    @pause_auto_play_in_finite_scroll.setter\n    def pause_auto_play_in_finite_scroll(self, value: Optional[bool]):\n        self._set_attr(\"pauseAutoPlayInFiniteScroll\", value)\n\n    # disable_center property\n    @property\n    def disable_center(self) -&gt; Optional[bool]:\n        \"\"\"\n        Whether or not to disable the Center widget for each slide.\n        \"\"\"\n        return self._get_attr(\"disableCenter\")\n\n    @disable_center.setter\n    def disable_center(self, value: Optional[bool]):\n        self._set_attr(\"disableCenter\", value)\n\n    # pad_ends property\n    @property\n    def pad_ends(self) -&gt; Optional[bool]:\n        \"\"\"\n        Whether to add padding to both ends of the list.\n        \"\"\"\n        return self._get_attr(\"padEnds\")\n\n    @pad_ends.setter\n    def pad_ends(self, value: Optional[bool]):\n        self._set_attr(\"padEnds\", value)\n\n    # clip_behavior property\n    @property\n    def clip_behavior(self) -&gt; Optional[ClipBehavior]:\n        \"\"\"\n        The clip behavior for the carousel.\n        \"\"\"\n        return self.__clip_behavior\n\n    @clip_behavior.setter\n    def clip_behavior(self, value: Optional[ClipBehavior]):\n        self.__clip_behavior = value\n        self._set_enum_attr(\"clipBehavior\", value, ClipBehavior)\n\n    # enable_scroll_events property\n    @property\n    def enable_scroll_events(self) -&gt; Optional[bool]:\n        \"\"\"\n        Whether to enable scroll events. Disabled by default to avoid event spam.\n        When enabled, on_scrolled events will be triggered during scrolling.\n        \"\"\"\n        return self._get_attr(\"enableScrollEvents\")\n\n    @enable_scroll_events.setter\n    def enable_scroll_events(self, value: Optional[bool]):\n        self._set_attr(\"enableScrollEvents\", value)\n\n    # Internal event handlers for JSON decoding\n    def _on_page_changed_internal(self, e):\n        \"\"\"Internal handler that decodes JSON and calls user handler.\"\"\"\n        if self.__on_page_changed_handler:\n            try:\n                # Decode JSON data and create EventData object\n                data_dict = json.loads(e.data) if isinstance(e.data, str) else e.data\n                event_data = EventData(data_dict)\n                # Pass EventData object that supports both data.attribute and data['key'] access\n                self.__on_page_changed_handler(event_data)\n            except (json.JSONDecodeError, AttributeError):\n                # Fallback: pass empty EventData if JSON decode fails\n                self.__on_page_changed_handler(EventData({}))\n\n    def _on_scrolled_internal(self, e):\n        \"\"\"Internal handler that decodes JSON and calls user handler.\"\"\"\n        if self.__on_scrolled_handler:\n            try:\n                # Decode JSON data and create EventData object\n                data_dict = json.loads(e.data) if isinstance(e.data, str) else e.data\n                # Only call handler if position is not None (Flutter can send null)\n                if data_dict.get(\"position\") is not None:\n                    event_data = EventData(data_dict)\n                    self.__on_scrolled_handler(event_data)\n            except (json.JSONDecodeError, AttributeError):\n                # Fallback: pass empty EventData if JSON decode fails\n                self.__on_scrolled_handler(EventData({}))\n\n    # Event handlers\n    @property\n    def on_page_changed(self) -&gt; OptionalControlEventCallable:\n        \"\"\"\n        Called whenever the page in the center of the viewport changes.\n\n        Args:\n            data (EventData): Event data object with attribute and dict-style access:\n                - data.index (int): The new page index\n                - data.reason (str): The reason for the change (\"controller\", \"manual\", \"timed\")\n\n        Example:\n            def on_page_changed(data):\n                # Attribute-style access (recommended)\n                print(f\"Page changed to: {data.index}, reason: {data.reason}\")\n\n                # Dict-style access (also supported for backward compatibility)\n                print(f\"Page changed to: {data['index']}, reason: {data['reason']}\")\n\n            carousel.on_page_changed = on_page_changed\n\n        Note: Data is automatically parsed from JSON string sent by Dart.\n        \"\"\"\n        return self.__on_page_changed_handler\n\n    @on_page_changed.setter\n    def on_page_changed(self, handler: OptionalControlEventCallable):\n        self.__on_page_changed_handler = handler\n\n    @property\n    def on_scrolled(self) -&gt; OptionalControlEventCallable:\n        \"\"\"\n        Called whenever the carousel is scrolled (only if enable_scroll_events=True).\n\n        Args:\n            data (EventData): Event data object with attribute and dict-style access:\n                - data.position (float): Raw position value from carousel_slider package (unformatted)\n\n        Example:\n            def on_scrolled(data):\n                # Attribute-style access (recommended)\n                position = data.position  # Raw float value as sent by Flutter\n                print(f\"Scrolled to position: {position}\")\n\n                # Dict-style access (also supported for backward compatibility)\n                position = data['position']\n                print(f\"Scrolled to position: {position}\")\n\n            carousel.on_scrolled = on_scrolled\n\n        Note:\n        - Data is automatically parsed from JSON string sent by Dart\n        - Position value is the raw float from Flutter carousel_slider package\n        - No formatting is applied to preserve original precision\n        - Handler is only called when position is not null (Flutter may send null values)\n        \"\"\"\n        return self.__on_scrolled_handler\n\n    @on_scrolled.setter\n    def on_scrolled(self, handler: OptionalControlEventCallable):\n        self.__on_scrolled_handler = handler\n        # Auto-enable scroll events if a handler is attached\n        if handler is not None and not (self.enable_scroll_events or False):\n            self.enable_scroll_events = True\n            if self.page:\n                self.update()\n        # Optionally disable when handler removed (keeping current behavior to avoid flicker)\n        # elif handler is None and (self.enable_scroll_events or False):\n        #     self.enable_scroll_events = False\n        #     if self.page:\n        #         self.update()\n\n    # Controller methods\n    def next_page(self, animation: Optional[AnimationValue] = None):\n        \"\"\"\n        Animate to the next page.\n\n        Args:\n            animation: Animation configuration. Can be:\n                - None: Use default animation (300ms, linear)\n                - bool: True for default, False for no animation\n                - int: Duration in milliseconds with default curve\n                - Animation: Full animation object with duration and curve\n\n        Examples:\n            carousel.next_page()  # Default animation\n            carousel.next_page(500)  # 500ms with default curve\n            carousel.next_page(ft.Animation(800, ft.AnimationCurve.EASE_IN_OUT))\n        \"\"\"\n        # Use Flet's standard animation serialization\n        duration = 300\n        curve = \"linear\"\n\n        if animation is None:\n            pass  # Use defaults\n        elif isinstance(animation, bool):\n            if not animation:\n                duration = 0  # No animation\n        elif isinstance(animation, int):\n            duration = animation\n        elif hasattr(animation, \"duration\") and hasattr(animation, \"curve\"):\n            duration = animation.duration or 300\n            if hasattr(animation.curve, \"value\"):\n                curve = animation.curve.value\n            elif animation.curve:\n                curve = str(animation.curve)\n\n        args = {\"duration\": str(duration), \"curve\": curve}\n        return self.invoke_method(\"next_page\", args, wait_for_result=False)\n\n    def previous_page(self, animation: Optional[AnimationValue] = None):\n        \"\"\"\n        Animate to the previous page.\n\n        Args:\n            animation: Animation configuration. Can be:\n                - None: Use default animation (300ms, linear)\n                - bool: True for default, False for no animation\n                - int: Duration in milliseconds with default curve\n                - Animation: Full animation object with duration and curve\n\n        Examples:\n            carousel.previous_page()  # Default animation\n            carousel.previous_page(500)  # 500ms with default curve\n            carousel.previous_page(ft.Animation(800, ft.AnimationCurve.EASE_IN_OUT))\n        \"\"\"\n        # Use Flet's standard animation serialization\n        duration = 300\n        curve = \"linear\"\n\n        if animation is None:\n            pass  # Use defaults\n        elif isinstance(animation, bool):\n            if not animation:\n                duration = 0  # No animation\n        elif isinstance(animation, int):\n            duration = animation\n        elif hasattr(animation, \"duration\") and hasattr(animation, \"curve\"):\n            duration = animation.duration or 300\n            if hasattr(animation.curve, \"value\"):\n                curve = animation.curve.value\n            elif animation.curve:\n                curve = str(animation.curve)\n\n        args = {\"duration\": str(duration), \"curve\": curve}\n        return self.invoke_method(\"previous_page\", args, wait_for_result=False)\n\n    def jump_to_page(self, page: int):\n        \"\"\"\n        Jump to the given page without animation.\n\n        Args:\n            page: The page index to jump to\n        \"\"\"\n        args = {\"page\": str(page)}\n        return self.invoke_method(\"jump_to_page\", args, wait_for_result=False)\n\n    def animate_to_page(self, page: int, animation: Optional[AnimationValue] = None):\n        \"\"\"\n        Animate to the given page.\n\n        Args:\n            page: The page index to animate to\n            animation: Animation configuration. Can be:\n                - None: Use default animation (300ms, linear)\n                - bool: True for default, False for no animation\n                - int: Duration in milliseconds with default curve\n                - Animation: Full animation object with duration and curve\n\n        Examples:\n            carousel.animate_to_page(2)  # Default animation\n            carousel.animate_to_page(2, 500)  # 500ms with default curve\n            carousel.animate_to_page(2, ft.Animation(800, ft.AnimationCurve.EASE_IN_OUT))\n        \"\"\"\n        # Use Flet's standard animation serialization\n        duration = 300\n        curve = \"linear\"\n\n        if animation is None:\n            pass  # Use defaults\n        elif isinstance(animation, bool):\n            if not animation:\n                duration = 0  # No animation\n        elif isinstance(animation, int):\n            duration = animation\n        elif hasattr(animation, \"duration\") and hasattr(animation, \"curve\"):\n            duration = animation.duration or 300\n            if hasattr(animation.curve, \"value\"):\n                curve = animation.curve.value\n            elif animation.curve:\n                curve = str(animation.curve)\n\n        args = {\"page\": str(page), \"duration\": str(duration), \"curve\": curve}\n        return self.invoke_method(\"animate_to_page\", args, wait_for_result=False)\n\n    def get_current_page(self):\n        \"\"\"\n        Get the current page index.\n\n        Returns:\n            The current page index as an integer\n        \"\"\"\n        return self.invoke_method(\"get_current_page\", {}, wait_for_result=True)\n\n    def start_auto_play(self):\n        \"\"\"\n        Start auto play if it's currently stopped.\n        \"\"\"\n        return self.invoke_method(\"start_auto_play\", {}, wait_for_result=False)\n\n    def stop_auto_play(self):\n        \"\"\"\n        Stop auto play if it's currently running.\n        \"\"\"\n        return self.invoke_method(\"stop_auto_play\", {}, wait_for_result=False)\n</code></pre>"},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.FletCarouselSlider-attributes","title":"Attributes","text":""},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.FletCarouselSlider.animate_to_closest","title":"<code>animate_to_closest</code>  <code>property</code> <code>writable</code>","text":"<p>Determines if carousel should loop to the closest occurrence of requested page.</p>"},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.FletCarouselSlider.aspect_ratio","title":"<code>aspect_ratio</code>  <code>property</code> <code>writable</code>","text":"<p>Aspect ratio is used if no height have been declared. Defaults to 16/9.</p>"},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.FletCarouselSlider.auto_play","title":"<code>auto_play</code>  <code>property</code> <code>writable</code>","text":"<p>Enables auto play, sliding one page at a time.</p>"},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.FletCarouselSlider.auto_play_animation","title":"<code>auto_play_animation</code>  <code>property</code> <code>writable</code>","text":"<p>The animation configuration for auto play transitions. Can be: - bool: True to enable with default settings, False to disable - int: Duration in milliseconds (e.g., 800) - Animation: Full animation object with duration and curve</p> <p>Examples: - auto_play_animation=True  # Default animation - auto_play_animation=500  # 500ms duration with default curve - auto_play_animation=ft.Animation(800, ft.AnimationCurve.EASE_IN_OUT)</p>"},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.FletCarouselSlider.auto_play_interval","title":"<code>auto_play_interval</code>  <code>property</code> <code>writable</code>","text":"<p>Sets Duration to determine the frequency of slides when auto play is enabled. Value in milliseconds. Defaults to 4000ms (4 seconds).</p>"},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.FletCarouselSlider.clip_behavior","title":"<code>clip_behavior</code>  <code>property</code> <code>writable</code>","text":"<p>The clip behavior for the carousel.</p>"},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.FletCarouselSlider.disable_center","title":"<code>disable_center</code>  <code>property</code> <code>writable</code>","text":"<p>Whether or not to disable the Center widget for each slide.</p>"},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.FletCarouselSlider.enable_infinite_scroll","title":"<code>enable_infinite_scroll</code>  <code>property</code> <code>writable</code>","text":"<p>Determines if carousel should loop infinitely or be limited to item length.</p>"},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.FletCarouselSlider.enable_scroll_events","title":"<code>enable_scroll_events</code>  <code>property</code> <code>writable</code>","text":"<p>Whether to enable scroll events. Disabled by default to avoid event spam. When enabled, on_scrolled events will be triggered during scrolling.</p>"},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.FletCarouselSlider.enlarge_center_page","title":"<code>enlarge_center_page</code>  <code>property</code> <code>writable</code>","text":"<p>Determines if current page should be larger than the side images, creating a feeling of depth in the carousel.</p>"},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.FletCarouselSlider.enlarge_factor","title":"<code>enlarge_factor</code>  <code>property</code> <code>writable</code>","text":"<p>How much the pages next to the center page will be scaled down. If enlarge_center_page is false, this property has no effect. Defaults to 0.3.</p>"},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.FletCarouselSlider.enlarge_strategy","title":"<code>enlarge_strategy</code>  <code>property</code> <code>writable</code>","text":"<p>Use enlarge_strategy to determine which method to enlarge the center page.</p>"},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.FletCarouselSlider.height","title":"<code>height</code>  <code>property</code> <code>writable</code>","text":"<p>Set carousel height and overrides any existing aspect_ratio.</p>"},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.FletCarouselSlider.initial_page","title":"<code>initial_page</code>  <code>property</code> <code>writable</code>","text":"<p>The initial page to show when first creating the CarouselSlider.</p>"},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.FletCarouselSlider.items","title":"<code>items</code>  <code>property</code> <code>writable</code>","text":"<p>List of widgets to be displayed in the carousel.</p>"},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.FletCarouselSlider.on_page_changed","title":"<code>on_page_changed</code>  <code>property</code> <code>writable</code>","text":"<p>Called whenever the page in the center of the viewport changes.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>EventData</code> <p>Event data object with attribute and dict-style access: - data.index (int): The new page index - data.reason (str): The reason for the change (\"controller\", \"manual\", \"timed\")</p> required Example <p>def on_page_changed(data):     # Attribute-style access (recommended)     print(f\"Page changed to: {data.index}, reason: {data.reason}\")</p> <pre><code># Dict-style access (also supported for backward compatibility)\nprint(f\"Page changed to: {data['index']}, reason: {data['reason']}\")\n</code></pre> <p>carousel.on_page_changed = on_page_changed</p> <p>Note: Data is automatically parsed from JSON string sent by Dart.</p>"},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.FletCarouselSlider.on_scrolled","title":"<code>on_scrolled</code>  <code>property</code> <code>writable</code>","text":"<p>Called whenever the carousel is scrolled (only if enable_scroll_events=True).</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>EventData</code> <p>Event data object with attribute and dict-style access: - data.position (float): Raw position value from carousel_slider package (unformatted)</p> required Example <p>def on_scrolled(data):     # Attribute-style access (recommended)     position = data.position  # Raw float value as sent by Flutter     print(f\"Scrolled to position: {position}\")</p> <pre><code># Dict-style access (also supported for backward compatibility)\nposition = data['position']\nprint(f\"Scrolled to position: {position}\")\n</code></pre> <p>carousel.on_scrolled = on_scrolled</p> <p>Note: - Data is automatically parsed from JSON string sent by Dart - Position value is the raw float from Flutter carousel_slider package - No formatting is applied to preserve original precision - Handler is only called when position is not null (Flutter may send null values)</p>"},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.FletCarouselSlider.pad_ends","title":"<code>pad_ends</code>  <code>property</code> <code>writable</code>","text":"<p>Whether to add padding to both ends of the list.</p>"},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.FletCarouselSlider.page_snapping","title":"<code>page_snapping</code>  <code>property</code> <code>writable</code>","text":"<p>Set to false to disable page snapping, useful for custom scroll behavior.</p>"},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.FletCarouselSlider.pause_auto_play_in_finite_scroll","title":"<code>pause_auto_play_in_finite_scroll</code>  <code>property</code> <code>writable</code>","text":"<p>If enable_infinite_scroll is false, and auto_play is true, this option decides if the carousel should go to the first item when it reaches the last item.</p>"},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.FletCarouselSlider.pause_auto_play_on_manual_navigate","title":"<code>pause_auto_play_on_manual_navigate</code>  <code>property</code> <code>writable</code>","text":"<p>If true, the auto play function will be paused when user is calling controller's next_page or previous_page or animate_to_page method.</p>"},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.FletCarouselSlider.pause_auto_play_on_touch","title":"<code>pause_auto_play_on_touch</code>  <code>property</code> <code>writable</code>","text":"<p>If true, the auto play function will be paused when user is interacting with the carousel, and will be resumed when user finish interacting.</p>"},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.FletCarouselSlider.reverse","title":"<code>reverse</code>  <code>property</code> <code>writable</code>","text":"<p>Reverse the order of items if set to true.</p>"},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.FletCarouselSlider.scroll_direction","title":"<code>scroll_direction</code>  <code>property</code> <code>writable</code>","text":"<p>The axis along which the page view scrolls.</p>"},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.FletCarouselSlider.viewport_fraction","title":"<code>viewport_fraction</code>  <code>property</code> <code>writable</code>","text":"<p>The fraction of the viewport that each page should occupy. Defaults to 0.8.</p>"},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.FletCarouselSlider-functions","title":"Functions","text":""},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.FletCarouselSlider.animate_to_page","title":"<code>animate_to_page(page, animation=None)</code>","text":"<p>Animate to the given page.</p> <p>Parameters:</p> Name Type Description Default <code>page</code> <code>int</code> <p>The page index to animate to</p> required <code>animation</code> <code>Optional[AnimationValue]</code> <p>Animation configuration. Can be: - None: Use default animation (300ms, linear) - bool: True for default, False for no animation - int: Duration in milliseconds with default curve - Animation: Full animation object with duration and curve</p> <code>None</code> <p>Examples:</p> <p>carousel.animate_to_page(2)  # Default animation carousel.animate_to_page(2, 500)  # 500ms with default curve carousel.animate_to_page(2, ft.Animation(800, ft.AnimationCurve.EASE_IN_OUT))</p> Source code in <code>src\\flet_carousel_slider\\flet_carousel_slider.py</code> <pre><code>def animate_to_page(self, page: int, animation: Optional[AnimationValue] = None):\n    \"\"\"\n    Animate to the given page.\n\n    Args:\n        page: The page index to animate to\n        animation: Animation configuration. Can be:\n            - None: Use default animation (300ms, linear)\n            - bool: True for default, False for no animation\n            - int: Duration in milliseconds with default curve\n            - Animation: Full animation object with duration and curve\n\n    Examples:\n        carousel.animate_to_page(2)  # Default animation\n        carousel.animate_to_page(2, 500)  # 500ms with default curve\n        carousel.animate_to_page(2, ft.Animation(800, ft.AnimationCurve.EASE_IN_OUT))\n    \"\"\"\n    # Use Flet's standard animation serialization\n    duration = 300\n    curve = \"linear\"\n\n    if animation is None:\n        pass  # Use defaults\n    elif isinstance(animation, bool):\n        if not animation:\n            duration = 0  # No animation\n    elif isinstance(animation, int):\n        duration = animation\n    elif hasattr(animation, \"duration\") and hasattr(animation, \"curve\"):\n        duration = animation.duration or 300\n        if hasattr(animation.curve, \"value\"):\n            curve = animation.curve.value\n        elif animation.curve:\n            curve = str(animation.curve)\n\n    args = {\"page\": str(page), \"duration\": str(duration), \"curve\": curve}\n    return self.invoke_method(\"animate_to_page\", args, wait_for_result=False)\n</code></pre>"},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.FletCarouselSlider.get_current_page","title":"<code>get_current_page()</code>","text":"<p>Get the current page index.</p> <p>Returns:</p> Type Description <p>The current page index as an integer</p> Source code in <code>src\\flet_carousel_slider\\flet_carousel_slider.py</code> <pre><code>def get_current_page(self):\n    \"\"\"\n    Get the current page index.\n\n    Returns:\n        The current page index as an integer\n    \"\"\"\n    return self.invoke_method(\"get_current_page\", {}, wait_for_result=True)\n</code></pre>"},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.FletCarouselSlider.jump_to_page","title":"<code>jump_to_page(page)</code>","text":"<p>Jump to the given page without animation.</p> <p>Parameters:</p> Name Type Description Default <code>page</code> <code>int</code> <p>The page index to jump to</p> required Source code in <code>src\\flet_carousel_slider\\flet_carousel_slider.py</code> <pre><code>def jump_to_page(self, page: int):\n    \"\"\"\n    Jump to the given page without animation.\n\n    Args:\n        page: The page index to jump to\n    \"\"\"\n    args = {\"page\": str(page)}\n    return self.invoke_method(\"jump_to_page\", args, wait_for_result=False)\n</code></pre>"},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.FletCarouselSlider.next_page","title":"<code>next_page(animation=None)</code>","text":"<p>Animate to the next page.</p> <p>Parameters:</p> Name Type Description Default <code>animation</code> <code>Optional[AnimationValue]</code> <p>Animation configuration. Can be: - None: Use default animation (300ms, linear) - bool: True for default, False for no animation - int: Duration in milliseconds with default curve - Animation: Full animation object with duration and curve</p> <code>None</code> <p>Examples:</p> <p>carousel.next_page()  # Default animation carousel.next_page(500)  # 500ms with default curve carousel.next_page(ft.Animation(800, ft.AnimationCurve.EASE_IN_OUT))</p> Source code in <code>src\\flet_carousel_slider\\flet_carousel_slider.py</code> <pre><code>def next_page(self, animation: Optional[AnimationValue] = None):\n    \"\"\"\n    Animate to the next page.\n\n    Args:\n        animation: Animation configuration. Can be:\n            - None: Use default animation (300ms, linear)\n            - bool: True for default, False for no animation\n            - int: Duration in milliseconds with default curve\n            - Animation: Full animation object with duration and curve\n\n    Examples:\n        carousel.next_page()  # Default animation\n        carousel.next_page(500)  # 500ms with default curve\n        carousel.next_page(ft.Animation(800, ft.AnimationCurve.EASE_IN_OUT))\n    \"\"\"\n    # Use Flet's standard animation serialization\n    duration = 300\n    curve = \"linear\"\n\n    if animation is None:\n        pass  # Use defaults\n    elif isinstance(animation, bool):\n        if not animation:\n            duration = 0  # No animation\n    elif isinstance(animation, int):\n        duration = animation\n    elif hasattr(animation, \"duration\") and hasattr(animation, \"curve\"):\n        duration = animation.duration or 300\n        if hasattr(animation.curve, \"value\"):\n            curve = animation.curve.value\n        elif animation.curve:\n            curve = str(animation.curve)\n\n    args = {\"duration\": str(duration), \"curve\": curve}\n    return self.invoke_method(\"next_page\", args, wait_for_result=False)\n</code></pre>"},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.FletCarouselSlider.previous_page","title":"<code>previous_page(animation=None)</code>","text":"<p>Animate to the previous page.</p> <p>Parameters:</p> Name Type Description Default <code>animation</code> <code>Optional[AnimationValue]</code> <p>Animation configuration. Can be: - None: Use default animation (300ms, linear) - bool: True for default, False for no animation - int: Duration in milliseconds with default curve - Animation: Full animation object with duration and curve</p> <code>None</code> <p>Examples:</p> <p>carousel.previous_page()  # Default animation carousel.previous_page(500)  # 500ms with default curve carousel.previous_page(ft.Animation(800, ft.AnimationCurve.EASE_IN_OUT))</p> Source code in <code>src\\flet_carousel_slider\\flet_carousel_slider.py</code> <pre><code>def previous_page(self, animation: Optional[AnimationValue] = None):\n    \"\"\"\n    Animate to the previous page.\n\n    Args:\n        animation: Animation configuration. Can be:\n            - None: Use default animation (300ms, linear)\n            - bool: True for default, False for no animation\n            - int: Duration in milliseconds with default curve\n            - Animation: Full animation object with duration and curve\n\n    Examples:\n        carousel.previous_page()  # Default animation\n        carousel.previous_page(500)  # 500ms with default curve\n        carousel.previous_page(ft.Animation(800, ft.AnimationCurve.EASE_IN_OUT))\n    \"\"\"\n    # Use Flet's standard animation serialization\n    duration = 300\n    curve = \"linear\"\n\n    if animation is None:\n        pass  # Use defaults\n    elif isinstance(animation, bool):\n        if not animation:\n            duration = 0  # No animation\n    elif isinstance(animation, int):\n        duration = animation\n    elif hasattr(animation, \"duration\") and hasattr(animation, \"curve\"):\n        duration = animation.duration or 300\n        if hasattr(animation.curve, \"value\"):\n            curve = animation.curve.value\n        elif animation.curve:\n            curve = str(animation.curve)\n\n    args = {\"duration\": str(duration), \"curve\": curve}\n    return self.invoke_method(\"previous_page\", args, wait_for_result=False)\n</code></pre>"},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.FletCarouselSlider.start_auto_play","title":"<code>start_auto_play()</code>","text":"<p>Start auto play if it's currently stopped.</p> Source code in <code>src\\flet_carousel_slider\\flet_carousel_slider.py</code> <pre><code>def start_auto_play(self):\n    \"\"\"\n    Start auto play if it's currently stopped.\n    \"\"\"\n    return self.invoke_method(\"start_auto_play\", {}, wait_for_result=False)\n</code></pre>"},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.FletCarouselSlider.stop_auto_play","title":"<code>stop_auto_play()</code>","text":"<p>Stop auto play if it's currently running.</p> Source code in <code>src\\flet_carousel_slider\\flet_carousel_slider.py</code> <pre><code>def stop_auto_play(self):\n    \"\"\"\n    Stop auto play if it's currently running.\n    \"\"\"\n    return self.invoke_method(\"stop_auto_play\", {}, wait_for_result=False)\n</code></pre>"},{"location":"FletCarouselSlider/#src.flet_carousel_slider.flet_carousel_slider.ScrollDirection","title":"<code>ScrollDirection</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum for scroll direction.</p> Source code in <code>src\\flet_carousel_slider\\flet_carousel_slider.py</code> <pre><code>class ScrollDirection(Enum):\n    \"\"\"\n    Enum for scroll direction.\n    \"\"\"\n\n    HORIZONTAL = \"horizontal\"\n    VERTICAL = \"vertical\"\n</code></pre>"},{"location":"examples/","title":"\ud83c\udfae Examples Gallery","text":"<p>This page showcases various use cases and implementations of the Flet Carousel Slider.</p>"},{"location":"examples/#basic-examples","title":"\ud83d\ude80 Basic Examples","text":""},{"location":"examples/#simple-carousel","title":"Simple Carousel","text":"<p>The most basic implementation with minimal configuration:</p> <pre><code>import flet as ft\nfrom flet_carousel_slider import FletCarouselSlider\n\ndef main(page: ft.Page):\n    page.title = \"Simple Carousel\"\n\n    # Create simple items\n    items = [\n        ft.Container(\n            content=ft.Text(f\"Page {i+1}\", size=32, color=ft.Colors.WHITE),\n            bgcolor=ft.Colors.BLUE_400,\n            border_radius=10,\n            padding=30,\n            alignment=ft.alignment.center,\n        )\n        for i in range(5)\n    ]\n\n    # Basic carousel\n    carousel = FletCarouselSlider(\n        items=items,\n        height=200,\n    )\n\n    page.add(carousel)\n\nft.app(main)\n</code></pre>"},{"location":"examples/#auto-play-carousel","title":"Auto-Play Carousel","text":"<p>Carousel with automatic page transitions:</p> <pre><code>import flet as ft\nfrom flet_carousel_slider import FletCarouselSlider\n\ndef main(page: ft.Page):\n    page.title = \"Auto-Play Carousel\"\n\n    colors = [ft.Colors.RED_400, ft.Colors.GREEN_400, ft.Colors.BLUE_400, ft.Colors.ORANGE_400]\n\n    items = [\n        ft.Container(\n            content=ft.Column([\n                ft.Icon(ft.Icons.STAR, size=50, color=ft.Colors.WHITE),\n                ft.Text(f\"Auto Page {i+1}\", size=24, weight=ft.FontWeight.BOLD, color=ft.Colors.WHITE),\n            ], alignment=ft.MainAxisAlignment.CENTER),\n            bgcolor=colors[i],\n            border_radius=15,\n            padding=20,\n            alignment=ft.alignment.center,\n        )\n        for i in range(4)\n    ]\n\n    carousel = FletCarouselSlider(\n        items=items,\n        height=300,\n        auto_play=True,\n        auto_play_interval=2000,  # 2 seconds\n        auto_play_animation=ft.Animation(600, ft.AnimationCurve.EASE_IN_OUT),\n        enlarge_center_page=True,\n        viewport_fraction=0.8,\n    )\n\n    page.add(carousel)\n\nft.app(main)\n</code></pre>"},{"location":"examples/#advanced-examples","title":"\ud83c\udfa8 Advanced Examples","text":""},{"location":"examples/#image-gallery","title":"Image Gallery","text":"<p>A beautiful image gallery with enlarge effects:</p> <pre><code>import flet as ft\nfrom flet_carousel_slider import FletCarouselSlider, CenterPageEnlargeStrategy\n\ndef main(page: ft.Page):\n    page.title = \"Image Gallery\"\n\n    # Create image items (replace with actual image URLs)\n    image_urls = [\n        \"https://picsum.photos/400/300?random=1\",\n        \"https://picsum.photos/400/300?random=2\",\n        \"https://picsum.photos/400/300?random=3\",\n        \"https://picsum.photos/400/300?random=4\",\n    ]\n\n    items = []\n    for i, url in enumerate(image_urls):\n        item = ft.Container(\n            content=ft.Stack([\n                ft.Image(\n                    src=url,\n                    width=350,\n                    height=250,\n                    fit=ft.ImageFit.COVER,\n                    border_radius=ft.border_radius.all(15),\n                ),\n                ft.Container(\n                    content=ft.Text(f\"Photo {i+1}\", size=18, weight=ft.FontWeight.BOLD, color=ft.Colors.WHITE),\n                    bgcolor=ft.Colors.with_opacity(0.7, ft.Colors.BLACK),\n                    padding=10,\n                    border_radius=ft.border_radius.only(bottom_left=15, bottom_right=15),\n                    alignment=ft.alignment.bottom_center,\n                ),\n            ]),\n            border_radius=15,\n        )\n        items.append(item)\n\n    carousel = FletCarouselSlider(\n        items=items,\n        height=300,\n        auto_play=True,\n        auto_play_interval=4000,\n        enlarge_center_page=True,\n        enlarge_strategy=CenterPageEnlargeStrategy.SCALE,\n        enlarge_factor=0.3,\n        viewport_fraction=0.8,\n        clip_behavior=ft.ClipBehavior.ANTI_ALIAS,\n    )\n\n    page.add(carousel)\n\nft.app(main)\n</code></pre>"},{"location":"examples/#product-showcase","title":"Product Showcase","text":"<p>A product carousel with interactive elements:</p> <pre><code>import flet as ft\nfrom flet_carousel_slider import FletCarouselSlider, CenterPageEnlargeStrategy\n\ndef main(page: ft.Page):\n    page.title = \"Product Showcase\"\n\n    products = [\n        {\"name\": \"Smartphone Pro\", \"price\": \"$999\", \"color\": ft.Colors.BLUE_400},\n        {\"name\": \"Laptop Ultra\", \"price\": \"$1299\", \"color\": ft.Colors.GREEN_400},\n        {\"name\": \"Tablet Max\", \"price\": \"$699\", \"color\": ft.Colors.ORANGE_400},\n        {\"name\": \"Watch Smart\", \"price\": \"$399\", \"color\": ft.Colors.PURPLE_400},\n    ]\n\n    def create_product_card(product):\n        return ft.Container(\n            content=ft.Column([\n                ft.Container(\n                    content=ft.Icon(ft.Icons.DEVICES, size=60, color=ft.Colors.WHITE),\n                    bgcolor=product[\"color\"],\n                    border_radius=50,\n                    width=100,\n                    height=100,\n                    alignment=ft.alignment.center,\n                ),\n                ft.Text(product[\"name\"], size=18, weight=ft.FontWeight.BOLD),\n                ft.Text(\"\u2b50\u2b50\u2b50\u2b50\u2b50\", size=16),\n                ft.Text(product[\"price\"], size=20, weight=ft.FontWeight.BOLD, color=product[\"color\"]),\n                ft.ElevatedButton(\"Buy Now\", bgcolor=product[\"color\"], color=ft.Colors.WHITE),\n            ], \n            alignment=ft.MainAxisAlignment.CENTER, \n            spacing=10,\n            horizontal_alignment=ft.CrossAxisAlignment.CENTER,\n            ),\n            bgcolor=ft.Colors.GREY_100,\n            border_radius=20,\n            padding=25,\n            border=ft.border.all(2, ft.Colors.GREY_300),\n        )\n\n    items = [create_product_card(product) for product in products]\n\n    carousel = FletCarouselSlider(\n        items=items,\n        height=350,\n        auto_play=False,  # Manual navigation for products\n        enlarge_center_page=True,\n        enlarge_strategy=CenterPageEnlargeStrategy.ZOOM,\n        enlarge_factor=0.2,\n        viewport_fraction=0.6,\n    )\n\n    page.add(carousel)\n\nft.app(main)\n</code></pre>"},{"location":"examples/#vertical-testimonials","title":"Vertical Testimonials","text":"<p>A vertical carousel for testimonials:</p> <pre><code>import flet as ft\nfrom flet_carousel_slider import FletCarouselSlider, ScrollDirection\n\ndef main(page: ft.Page):\n    page.title = \"Customer Testimonials\"\n\n    testimonials = [\n        {\"text\": \"Amazing product! Highly recommended.\", \"author\": \"John D.\"},\n        {\"text\": \"Great quality and fast delivery.\", \"author\": \"Sarah M.\"},\n        {\"text\": \"Excellent customer service.\", \"author\": \"Mike R.\"},\n        {\"text\": \"Best purchase I've made this year!\", \"author\": \"Lisa K.\"},\n    ]\n\n    items = []\n    for testimonial in testimonials:\n        item = ft.Container(\n            content=ft.Column([\n                ft.Text(f'\"{testimonial[\"text\"]}\"', size=16, italic=True, text_align=ft.TextAlign.CENTER),\n                ft.Text(\"\u2b50\u2b50\u2b50\u2b50\u2b50\", size=18, text_align=ft.TextAlign.CENTER),\n                ft.Text(f\"- {testimonial['author']}\", size=14, weight=ft.FontWeight.BOLD, text_align=ft.TextAlign.CENTER),\n            ], spacing=10),\n            bgcolor=ft.Colors.BLUE_50,\n            border_radius=15,\n            padding=20,\n            border=ft.border.all(1, ft.Colors.BLUE_200),\n        )\n        items.append(item)\n\n    carousel = FletCarouselSlider(\n        items=items,\n        height=150,\n        scroll_direction=ScrollDirection.VERTICAL,\n        auto_play=True,\n        auto_play_interval=3000,\n        viewport_fraction=0.8,\n        enlarge_center_page=False,\n    )\n\n    page.add(carousel)\n\nft.app(main)\n</code></pre>"},{"location":"examples/#interactive-examples","title":"\ud83c\udf9b\ufe0f Interactive Examples","text":""},{"location":"examples/#event-handling","title":"Event Handling","text":"<p>Carousel with comprehensive event handling:</p> <pre><code>import flet as ft\nfrom flet_carousel_slider import FletCarouselSlider\n\ndef main(page: ft.Page):\n    page.title = \"Event Handling Demo\"\n\n    status = ft.Text(\"Ready\", size=16, weight=ft.FontWeight.BOLD)\n\n    def on_page_changed(data):\n        # New attribute-style access\n        status.value = f\"Page: {data.index}, Reason: {data.reason}\"\n        page.update()\n\n    def on_scrolled(data):\n        print(f\"Scroll position: {data.position}\")\n\n    items = [\n        ft.Container(\n            content=ft.Text(f\"Page {i}\", size=24, color=ft.Colors.WHITE),\n            bgcolor=ft.Colors.BLUE_400,\n            border_radius=10,\n            padding=20,\n            alignment=ft.alignment.center,\n        )\n        for i in range(5)\n    ]\n\n    carousel = FletCarouselSlider(\n        items=items,\n        height=200,\n        auto_play=True,\n        enable_scroll_events=True,\n        on_page_changed=on_page_changed,\n        on_scrolled=on_scrolled,\n    )\n\n    page.add(status, carousel)\n\nft.app(main)\n</code></pre>"},{"location":"examples/#manual-controls","title":"Manual Controls","text":"<p>Carousel with custom navigation buttons:</p> <pre><code>import flet as ft\nfrom flet_carousel_slider import FletCarouselSlider\n\ndef main(page: ft.Page):\n    page.title = \"Manual Controls\"\n\n    items = [\n        ft.Container(\n            content=ft.Text(f\"Page {i}\", size=24, color=ft.Colors.WHITE),\n            bgcolor=ft.Colors.GREEN_400,\n            border_radius=10,\n            padding=20,\n            alignment=ft.alignment.center,\n        )\n        for i in range(6)\n    ]\n\n    carousel = FletCarouselSlider(\n        items=items,\n        height=200,\n        auto_play=False,\n        enlarge_center_page=True,\n    )\n\n    # Control buttons\n    def next_page(e):\n        carousel.next_page(ft.Animation(500, ft.AnimationCurve.EASE_IN_OUT))\n\n    def previous_page(e):\n        carousel.previous_page(ft.Animation(500, ft.AnimationCurve.BOUNCE_OUT))\n\n    def jump_to_first(e):\n        carousel.jump_to_page(0)\n\n    def animate_to_last(e):\n        carousel.animate_to_page(len(items)-1, ft.Animation(1000, ft.AnimationCurve.ELASTIC_OUT))\n\n    controls = ft.Row([\n        ft.ElevatedButton(\"\u2190 Previous\", on_click=previous_page),\n        ft.ElevatedButton(\"Next \u2192\", on_click=next_page),\n        ft.ElevatedButton(\"First\", on_click=jump_to_first),\n        ft.ElevatedButton(\"Last\", on_click=animate_to_last),\n    ], alignment=ft.MainAxisAlignment.CENTER)\n\n    page.add(carousel, controls)\n\nft.app(main)\n</code></pre>"},{"location":"examples/#configuration-examples","title":"\ud83d\udd27 Configuration Examples","text":""},{"location":"examples/#all-parameters-demo","title":"All Parameters Demo","text":"<p>A comprehensive example showing most configuration options:</p> <pre><code>import flet as ft\nfrom flet_carousel_slider import FletCarouselSlider, CenterPageEnlargeStrategy, ScrollDirection\n\ndef main(page: ft.Page):\n    page.title = \"Full Configuration Demo\"\n\n    items = [\n        ft.Container(\n            content=ft.Text(f\"Item {i}\", size=20, color=ft.Colors.WHITE),\n            bgcolor=ft.Colors.PURPLE_400,\n            border_radius=10,\n            padding=20,\n            alignment=ft.alignment.center,\n        )\n        for i in range(8)\n    ]\n\n    carousel = FletCarouselSlider(\n        items=items,\n        height=300,\n        aspect_ratio=16/9,\n        viewport_fraction=0.85,\n        initial_page=2,\n        enable_infinite_scroll=True,\n        animate_to_closest=True,\n        reverse=False,\n        auto_play=True,\n        auto_play_interval=3000,\n        auto_play_animation=ft.Animation(800, ft.AnimationCurve.EASE_IN_OUT_CUBIC),\n        enlarge_center_page=True,\n        enlarge_factor=0.3,\n        enlarge_strategy=CenterPageEnlargeStrategy.SCALE,\n        page_snapping=True,\n        scroll_direction=ScrollDirection.HORIZONTAL,\n        pause_auto_play_on_touch=True,\n        pause_auto_play_on_manual_navigate=True,\n        pause_auto_play_in_finite_scroll=False,\n        disable_center=False,\n        pad_ends=True,\n        clip_behavior=ft.ClipBehavior.ANTI_ALIAS,\n        enable_scroll_events=True,\n        on_page_changed=lambda data: print(f\"Page changed: {data.index}\"),\n        on_scrolled=lambda data: print(f\"Scrolled: {data.position}\"),\n    )\n\n    page.add(carousel)\n\nft.app(main)\n</code></pre> <p>For more examples, check out the interactive demo: <pre><code>python examples/flet_carousel_slider_example/src/main.py\n</code></pre></p>"}]}